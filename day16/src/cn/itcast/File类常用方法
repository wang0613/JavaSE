File 类：
 * 用来将文件和文件夹封装为对象，方便对文件与文件夹的属性信息进行操作
 *      流 只能操作数据, File可以操作文件夹
 * File对象可以作为参数传递给流的构造函数
   字段： File.separator 分隔符
构造方法：
       File​(String pathname);  创建File实例
       File​(File parent, String child); 从父类目录下，创建File 实例

         * File对象常见方法：
         *   1. 获取
         *      1.1 获取文件名称 getName();
         *      1.2 获取文件路径 getPath(); getAbsolutePath();
         *      1.3 获取文件大小 length();
         *      1.4 获取文件的修改时间 lastModified()
         *   2.创建
         *      boolean        createNewFile(); 创建未存在的文件，已存在，无法创建
         *      static File    createTempFile(String prefix, String suffix)
         *       创建一个临时文件，指定名称和 文件后缀
         *      static File    createTempFile(String prefix, String suffix, File directory)
         *       创建一个临时文件，指定名称 文件后缀和文件目录
         *   3. 删除
         *      boolean    delete(); 删除文件
         *      void       deleteOnExit();  虚拟机结束时，删除文件或者目录
         *    文件夹的创建
         *      boolean   mkdir(); 创建未存在的文件夹    delete删除，如果文件夹中有文件，无法删除
         *      boolean   mkdirs(); 创建多级文件夹      delete只能删除最终文件夹，父级无法删除
         *    3.判断
         *      boolean exists(); 判断文件是否存在
         *              isFile();  是不是文件
         *              isDirectory(); 是不是目录
         *    4. 重命名
         *      boolean   renameTo(); 把文件f1重命名为f2
         *
         *  静态方法： 获取系统的根目录 ：
         *          File.ListRoots(); 返回一个File对象数组
         *
         *    获取盘符空间
         *    file.getFreeSpace()
         *    file.getTotalSpace()
         *    file.getUsableSpace()
————————————————————————————————————————————————————————————
list(): 只能获取文件夹名称：
    String[]        file.list(); 获取盘符下所有目录，包括隐藏文件夹
    String[]        file.list(过滤器); 保留过滤后的文件目录
FilenameFilter 文件名过滤接口，重写accept（）用于过滤类 File的list方法中的目录列表。

listFiles()： 获取目录对象
    File[]          file.listFiles(); 获取盘符下目录对象
    File[]          file.listFiles(过滤器); 获取盘符下目录对象
FileFilter；抽象路径名的过滤器，可以将此接口的实例传递给File类的listFiles(FileFilter)方法。
————————————————————————————————————————————————————————————
    * Map：
         *   !--Hashtable
         *      !--properties
         * properties集合：
         * 特点：
         *      1.该集合中的键和值都是【字符串】类型
         *      2.该集合中数据可以保存在流中，或者从流中获取
         *  通常该集合用于操作以键值对形式存在的配置文件
Properties常用方法：
         //创建一个没有默认值的空属性列表
        Properties prop = new Properties();
        //存储元素
        prop.setProperty("zhang", "63"); // 原理就是：调用put方法
        //修改元素
        prop.setProperty("zhou", "50"); //键相同，值覆盖
        //取出元素
        Set<String> names = prop.stringPropertyNames(); //返回全部键，
         //通过键 来获取值
         prop.getProperty(name);
---————————————————————————————-
    //list方法：将属性列表输出到指定的输出流，调试用。
    prop.list(System.out); //输出流为控制台
——————————————————————————————
   //store方法：想要将这些集合中的字符串键值信息，持久化存储到问文件中，需要关联输出流
        FileOutputStream fos = new FileOutputStream("info.txt");
        //将集合中的数据存储到文件中，使用store方法
        prop.store(fos, "name+age"); //解释信息
__________________________________
        //使用load 方法，读取属性列表,加载到集合中
        FileInputStream fis = new FileInputStream("info.txt");
        prop.load(fis);