IO流：
   用于处理色设备之间的数据传输
   Java对数据的操作是通过流的方式
   Java用于操作流的对象都放在IO包中

   流按操作数据分为两种： 【字节流】和【字符流】
   流按流向分为：输入流（读）和 输出流（写）
   java内置的是Unicode码表，特点：无论什么字符，都用两个字节表示。
输入流和输出流是相对于内存设备而言。
    将外设中的数据读取到内存中：输入
    将内存中的数据写入到外设中： 输出

字节流：-传输过程中，传输数据的最基本单位是字节的流。
字符流：-传输过程中，传输数据的最基本单位是字符的流。
    字符流的由来就是：
    字符流读取文件数据后，不直接操作而是先查指定的编码表，获取对应的文字，再对这个文字进行操作。
    简单说： 字节流 +编码表
--------------------------------------------
字节流的抽象基类(顶层父类)：
    InputStream, OutputStream
字符流的抽象基类：
    Reader(输入流) ， Writer(输出流)
注意：这四个类派生出来的子类名称都是以父类作为子类名的后缀
     而且子类名的前缀就是该对象的功能。
————————————————————————————————————————————
IO异常的处理：
        /**
         * 位置错误 会出现两个异常：IO异常 和空指针异常：
         *  因为位置错误，无法创建对象fw，
         *  所以在catch之后，finally中的close，无法调用，所以出现空指针异常
         */

        FileWriter fw = null;
        try {

            fw = new FileWriter("k:\\demo.txt");
            fw.write("ABC "+LINE_SEPARATOR+"NBA");//错误直接去catch了
        } catch (IOException e) {

            System.out.println(e.toString());
            System.out.println(e.getMessage());//获取异常信息
        }finally {

            if (fw != null)
            try {
                fw.close();
            } catch (IOException e){
                throw new RuntimeException("关闭失败");
            }
        }
___________________________________________
为什么要关闭流？
     流就是把硬盘上的东西放到内存上，不关就会浪费资源

      垃圾收集器不能监管全部输入输出流，也就是说你不关闭的话！
      它可能自始至终都占用你的内存空间一直不会释放！
      运程的时间一长，可能就outOfMemoryError了 内存溢出
————————————————————————————————————————————————————
字符流的缓冲区：对要操作的内容进行了临时的缓存，提高性能。

    BufferedWriter: 创建缓冲区对象，必须添加被缓冲流的对象

分隔符的差别：
private static final String LINE_SEPARATOR =System.getProperty("line.separator") ;
这个是任何系统都可以用，都具备
new Line(); 只有BufferedWriter 具备。
注意事项：
    缓冲区BufferWriter：中的read（）是重写父类Reader中的方法。
    如果使用的是缓冲区对象，读取的都是缓冲区中的字符数据。
BufferedWriter:
    new line(); 分隔符
BufferedReader:
   String  readLine(); 读取一行
原理：使用了读取缓冲区的read方法，将读取到的字符进行缓冲，并判断换行标记，将标记前的缓存数据变成字符串。
________________________________________________
装饰者模式也称为包装模式（Wrapper Pattern）：
    对一组对象的功能进行增强时，就可以使用该模式进行问题的解决。

装饰和继承都实现一样的特点： 进行功能的扩展增强
    继承一旦，脱离比较麻烦，并且会越来越臃肿。
    装饰：让缓冲和具体的对象相结合，可以将缓冲进行单独的封装，哪个对象需要缓冲就将哪个对象和缓冲关联
class Buffer{
private MediaWriter m;
    Buffer(MediaWriter m) {
        this.m = m;
    }

    Buffer(TextWriter t) {
        this.t = t;
    }

}
class BufferWriter extends Writer {
    Buffer(Writer w) {

    }
}
Writer：
    ！--TextWriter:用于操作文本
    ！--MediaWriter:用于操作媒体
    ！--BufferWriter：用于提高效率
装饰比继承更为灵活！！
特点： 装饰类和被装饰类都必须所属同一个接口或者父类

字符流：用的缓冲区是char[] 数组
字符流能不能读写一张图片：
不行！
因为，字符流在读取完了字节数据后并没有直接往目的地写，而字节流是【直接写入的】。
而是先查编码表，查到对应的数据就将该数据写入目的地。
如果查不到，则码表会将一些未知区域中的数据去map这些字节数据，
然后写到目的地，这样的话就造成了源数据和目的数据的不一致。
—————————————————————————————————————————————————————————————————————————————————
字节流：用的缓冲器是 byte[] 数组
        //字节流：读取中文读取两次，一次读取一个字节
利用Reader子类InputStreamReader将字节流转换为字符流之后
        //字符流 :中文只读取一次。
—————————————————————————————————————————————————————————————————————————————————————————
需求：将键盘录入的数据写入到一个文件中
    //键盘输入的字节文件----->缓存区的字符流
   BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));

  //字符缓冲区——————————>目的地文件 字节
BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("a.txt")));

需求：键盘输入字节文件--->控制台打印
BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));

BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));

需求：讲一个字节文件中的内容复制到另一个文件里
BufferedReader bufr = new BufferedReader(new InputStreamReader(new FileInputStream(a.txt));

BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(b.txt)));

__________________________________________________________________
转换流：
    InputStreamReader: 字节到字符的桥梁 解码
    OutputStreamWriter： 字符到字节的桥梁 编码

流的操作规律：
之所以要弄清这个规律，是因为流的对象太多了，开发时不知道弄哪个对象合适。

想要知道开发时用到那些对象，只要通过四个明确即可。

1.明确源和目的（汇）
    源：（读取） InputStream  Reader
    目的：（写入位置） OutputStream Writer

2.明确数据是否是纯文本数据
    源：是纯文本：（字符流）Reader
        否：InputStream
    目的：是纯文本 Writer
        否 OutputStream
到这里，就可以明确到底使用哪个体系。

3.明确具体的设备
    源设备：
        硬盘：File
        键盘：System.in
        内存: 数组
        网络： Socket流

    目的设备：
         硬盘：File
         控制台：System.out
         内存：数组
         网络：Socket流
4.是否需要其他额外功能
    1.是否需要高效（缓冲区）
        是：就加上Buffer
    2.转换


需求演示（1：）：复制一个文件
    1.明确源和目的
    源：InputStream Reader
    目的： OutputStream Writer
    2.是否是纯文本
        是：
            源：Reader
            目的：Writer
    3.明确具体的设备：
        源：
            硬盘：File
        目的：
            硬盘：File
    FileReader fr = new FileReader("a.txt");
    FileWriter fw = new FileWriter("b.txt");
    4.需要额外的功能吗？
        需要： 高效
        BufferedReader bufr = new BufferedReader(new FileReader("a.txt"));
        BufferedWriter bufw = new BufferedWriter(new FileWriter("b.txt"));
需求演示（2：）：读取键盘信息，并写入到一个文件中。
      1.明确源和目的
        源：InputStream Reader
        目的： OutputStream Writer
      2.是否是纯文本
        是：
            源：Reader
            目的：Writer
      3.明确设备：
        源：键盘 System.in
        目的：
            硬盘：File
      InputSteam in = System.in;
      FileWriter fw = new FileWriter("c.txt");
      这样做可以完成，但是麻烦，将读取到的数据转成字符串。再有字符流操作
      4.需要额外功能？
        需要，转换： 将字节流转换为字符流。因为明确的源是reader，这样操作文本数据最便捷
            所以要将已有的字节流转换为字节流，
            使用字节--》字符流 InputStreamReader
         InputStreamReader isr = new InputStreamReader(System.in);
         FileWriter fw = new FileWriter("b.txt");

        还需要功能吗？
        需要高效:
            BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in);
            BufferedWriter bufw = new BufferedWriter(new FileWriter("d.txt"));
_________________________________________________________________________
需求演示（3：）：将一个文本文件数据显示在控制台上
     1.明确源和目的
            源：InputStream Reader
            目的： OutputStream Writer
     2.是否是纯文本
            是：
                源：Reader
                目的：Writer
     3.明确设备
        源：
            硬盘：File
        目的：
            控制台：System.out
     FileReader fr = new FileReader("a.txt");
     OutputStream out = new OutputStream(System.out); //PrintStream
     4.需要额外功能吗？
        需要转换：
        FileReader fr = new FileReader("a.txt");
        字节————————>字符流 OutputStreamWriter
        OutputStreamWriter  osw = new OutputSteamWriter(System.out);
        需要高效：
        BufferedReader bufr =new BufferedReader(new FileReader("a.txt"));
        BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));
-----------------------------------------------------------------
需求演示（4：）：读取键盘录入数据，并显示在控制台上
     1.明确源和目的
         源：InputStream Reader
         目的： OutputStream Writer
     2.是否是纯文本
         是：
            源：Reader
            目的：Writer
     3.明确设备：
        源：键盘 ： System.in
        目的： 控制台 ：System.out

        InputStream in = System.in;
        OutputStream out = System.out;
     4.额外功能：
        需要转换：因为都是字节流，但是操作的却是文本数据，所以使用字符流操作起来更为爽。
        InputStreamReader  isr = new InputStreamReader(System.in);
        OutputStreamWriter  osw = new OutputStreamWriter(System.out);

        为了其高效动作：
        BufferedReader bufr = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufw = new BufferedWriter(new OutputStreamWriter(System.out));
___________________________________________________________________________
需求5：重点：将一个中文字符串数据 按照指定的编码表写入到一个文本文件中

    1.目的 OutputStream  Writer
    2.是纯文本  Writer
    3.设备 硬盘：File
    FileWriter fw = new FileWriter("a.txt");
    fw.write("你好");
注意： 既然需求中明确了指定的编码表的动作
    那就不可以使用FileWriter， 因为FileWriter内部使用的是默认的编码表
    只能使用其父类OutputStreamWriter转换流。
    OutputStreamWriter接收一个字节输出流对象， 既然是操作文件，、那么该对象应该是FileOutputStream

    OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("a.txt"),"GBK");
    或者设置常量，charsetName;
 需要高效：
 字符流由来就是：字节流+编码表
    BufferedWriter bufw = new BufferWriter(new OutputStreamWriter(new FileOutputStream("a.txt"),"GBK"));
————————————————————————————————————————————————————————————————————————
什么时候使用转换流？
    1.源 或者目的对应的设备是字节流，但是操作的却是文本数据，可以使用转换流作为桥梁。
        提高对文本操作的便捷
    2.一旦操作文本涉及具体的指定编码表时，必须使用转换流


转换流中可以使用指定的码表进行 编码和解码
字符流--->字节流  编码

---------------------------------------------------------
一个汉字，在不同的码表中占用是不同的，一般是2个字节
window中文版：默认的是GBK码表，中文占用两个字节
Java用的是ASCII编码表，兼容性最强
UTF-8编码表中 一个中文占用的字节数是不相同的，一般为3个字节
说到 UTF 必须要提到 Unicode（Universal Code 统一码），Unicode 是 Java 和 XML 的基础，
___________________________________________________________
打印流：
    PrintWriter:字符打印流

    PrintStream:字节打印流
    向另一个输出流添加功能，即能够方便地打印各种数据值的表示,永远不会抛出IOException 。

序列流：  对多个流进行合并
    SequenceInputStream：相当于将几个输入流，合并为一个大流
操作对象：
    ObjectInputStream：
    ObjectOutputStream:
